name: tests

on:
  pull_request:
  push:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
          override: true

      - uses: actions-rs/cargo@v1
        name: Run rustfmt on `sea-query`
        with:
          command: fmt
          args: >
            --all
            --
            --check

      - uses: actions-rs/cargo@v1
        name: Run rustfmt on `sea-query-binder`
        with:
          command: fmt
          args: >
            --manifest-path sea-query-binder/Cargo.toml
            --all
            --
            --check

      - uses: actions-rs/cargo@v1
        name: Run rustfmt on `sea-query-rusqlite`
        with:
          command: fmt
          args: >
            --manifest-path sea-query-rusqlite/Cargo.toml
            --all
            --
            --check

      - uses: actions-rs/cargo@v1
        name: Run rustfmt on `sea-query-postgres`
        with:
          command: fmt
          args: >
            --manifest-path sea-query-postgres/Cargo.toml
            --all
            --
            --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
          override: true

      - uses: actions-rs/cargo@v1
        name: Run clippy on `sea-query`
        with:
          command: clippy
          args: >
            --all-features
            --workspace

      - uses: actions-rs/cargo@v1
        name: Run clippy on `sea-query-binder`
        with:
          command: clippy
          args: >
            --manifest-path sea-query-binder/Cargo.toml
            --workspace
            --features runtime-async-std-rustls
            --features=with-chrono,with-json,with-rust_decimal,with-bigdecimal,with-uuid,with-time,with-ipnetwork,with-mac_address,postgres-array
            --
            -D warnings

      - uses: actions-rs/cargo@v1
        name: Run clippy on `sea-query-rusqlite`
        with:
          command: clippy
          args: >
            --manifest-path sea-query-rusqlite/Cargo.toml
            --all-features
            --workspace
            --
            -D warnings

      - uses: actions-rs/cargo@v1
        name: Run clippy on `sea-query-postgres`
        with:
          command: clippy
          args: >
            --manifest-path sea-query-postgres/Cargo.toml
            --all-features
            --workspace
            --
            -D warnings

  build:
    name: Build `sea-query`
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --workspace 
            --no-default-features

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --workspace 
            --all-features

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --workspace 
            --features=with-chrono

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --workspace 
            --features=with-json

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --workspace 
            --features=with-rust_decimal

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --workspace 
            --features=with-bigdecimal

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --workspace 
            --features=with-uuid

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --workspace 
            --features=with-time

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --workspace 
            --features=with-ipnetwork

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --workspace 
            --features=with-mac_address

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --workspace 
            --features=postgres-array

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --workspace 
            --features=thread-safe

  binder-build:
    name: Build `sea-query-binder`
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        runtime: [ async-std ]
        tls: [ rustls ]
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-binder/Cargo.toml
            --workspace 
            --features sqlx-postgres,sqlx-sqlite,sqlx-any,sqlx-mysql
            --features=runtime-${{ matrix.runtime }}-${{ matrix.tls }}
            --features=with-chrono,with-json,with-rust_decimal,with-bigdecimal,with-uuid,with-time,with-ipnetwork,with-mac_address,postgres-array

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-binder/Cargo.toml
            --workspace 
            --features sqlx-postgres,sqlx-sqlite,sqlx-any,sqlx-mysql
            --features=runtime-${{ matrix.runtime }}-${{ matrix.tls }}
            --features=with-chrono

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-binder/Cargo.toml
            --workspace 
            --features sqlx-postgres,sqlx-sqlite,sqlx-any,sqlx-mysql
            --features=runtime-${{ matrix.runtime }}-${{ matrix.tls }}
            --features=with-json

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-binder/Cargo.toml
            --workspace 
            --features sqlx-postgres,sqlx-sqlite,sqlx-any,sqlx-mysql
            --features=runtime-${{ matrix.runtime }}-${{ matrix.tls }}
            --features=with-rust_decimal

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-binder/Cargo.toml
            --workspace 
            --features sqlx-postgres,sqlx-sqlite,sqlx-any,sqlx-mysql
            --features=runtime-${{ matrix.runtime }}-${{ matrix.tls }}
            --features=with-bigdecimal

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-binder/Cargo.toml
            --workspace 
            --features sqlx-postgres,sqlx-sqlite,sqlx-any,sqlx-mysql
            --features=runtime-${{ matrix.runtime }}-${{ matrix.tls }}
            --features=with-uuid

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-binder/Cargo.toml
            --workspace 
            --features sqlx-postgres,sqlx-sqlite,sqlx-any,sqlx-mysql
            --features=runtime-${{ matrix.runtime }}-${{ matrix.tls }}
            --features=with-time

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-binder/Cargo.toml
            --workspace 
            --features sqlx-postgres,sqlx-sqlite,sqlx-any,sqlx-mysql
            --features=runtime-${{ matrix.runtime }}-${{ matrix.tls }}
            --features=with-ipnetwork

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-binder/Cargo.toml
            --workspace 
            --features sqlx-postgres,sqlx-sqlite,sqlx-any,sqlx-mysql
            --features=runtime-${{ matrix.runtime }}-${{ matrix.tls }}
            --features=with-mac_address

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-binder/Cargo.toml
            --workspace 
            --features sqlx-postgres,sqlx-sqlite,sqlx-any,sqlx-mysql
            --features=runtime-${{ matrix.runtime }}-${{ matrix.tls }}
            --features=postgres-array

  rusqlite-build:
    name: Build `sea-query-rusqlite`
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-rusqlite/Cargo.toml
            --workspace 
            --features=with-chrono,with-json,with-rust_decimal,with-bigdecimal,with-uuid,with-time,with-ipnetwork,with-mac_address,postgres-array

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-rusqlite/Cargo.toml
            --workspace 
            --features=with-chrono

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-rusqlite/Cargo.toml
            --workspace 
            --features=with-json

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-rusqlite/Cargo.toml
            --workspace 
            --features=with-rust_decimal

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-rusqlite/Cargo.toml
            --workspace 
            --features=with-bigdecimal

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-rusqlite/Cargo.toml
            --workspace 
            --features=with-uuid

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-rusqlite/Cargo.toml
            --workspace 
            --features=with-time

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-rusqlite/Cargo.toml
            --workspace 
            --features=with-ipnetwork

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-rusqlite/Cargo.toml
            --workspace 
            --features=with-mac_address

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-rusqlite/Cargo.toml
            --workspace 
            --features=postgres-array

  postgres-build:
    name: Build `sea-query-postgres`
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-postgres/Cargo.toml
            --workspace 
            --features=with-chrono,with-json,with-rust_decimal,with-bigdecimal,with-uuid,with-time,with-ipnetwork,with-mac_address,postgres-array

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-postgres/Cargo.toml
            --workspace 
            --features=with-chrono

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-postgres/Cargo.toml
            --workspace 
            --features=with-json

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-postgres/Cargo.toml
            --workspace 
            --features=with-rust_decimal

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-postgres/Cargo.toml
            --workspace 
            --features=with-bigdecimal

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-postgres/Cargo.toml
            --workspace 
            --features=with-uuid

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-postgres/Cargo.toml
            --workspace 
            --features=with-time

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-postgres/Cargo.toml
            --workspace 
            --features=with-ipnetwork

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-postgres/Cargo.toml
            --workspace 
            --features=with-mac_address

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --manifest-path sea-query-postgres/Cargo.toml
            --workspace 
            --features=postgres-array

  test:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: ["build"]
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features

  derive-test:
    name: Derive Tests
    runs-on: ubuntu-latest
    needs: ["build"]
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --package sea-query-derive --all-features

      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --package sea-query-derive --all-features

  sqlite:
    name: SQLite
    runs-on: ubuntu-latest
    needs: ["test", "derive-test", "rusqlite-build", "binder-build"]
    strategy:
      matrix:
        example: [rusqlite, sqlx_sqlite]
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path examples/${{ matrix.example }}/Cargo.toml

      - uses: actions-rs/cargo@v1
        with:
          command: run
          args: --manifest-path examples/${{ matrix.example }}/Cargo.toml

  mysql:
    name: MySQL
    runs-on: ubuntu-latest
    needs: ["test", "derive-test", "binder-build"]
    strategy:
      matrix:
        version: [8.0, 5.7]
        example: [sqlx_mysql]
    services:
      mysql:
        image: mysql:${{ matrix.version }}
        env:
          MYSQL_HOST: 127.0.0.1
          MYSQL_DATABASE: query
          MYSQL_USER: sea
          MYSQL_PASSWORD: sea
          MYSQL_ROOT_PASSWORD: sea
        ports:
          - "3306:3306"
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path examples/${{ matrix.example }}/Cargo.toml

      - uses: actions-rs/cargo@v1
        with:
          command: run
          args: --manifest-path examples/${{ matrix.example }}/Cargo.toml

  mariadb:
    name: MariaDB
    runs-on: ubuntu-latest
    needs: ["test", "derive-test", "binder-build"]
    strategy:
      matrix:
        version: [10.6]
        example: [sqlx_mysql]
    services:
      mariadb:
        image: mariadb:${{ matrix.version }}
        env:
          MYSQL_HOST: 127.0.0.1
          MYSQL_DATABASE: query
          MYSQL_USER: sea
          MYSQL_PASSWORD: sea
          MYSQL_ROOT_PASSWORD: sea
        ports:
          - "3306:3306"
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path examples/${{ matrix.example }}/Cargo.toml

      - uses: actions-rs/cargo@v1
        with:
          command: run
          args: --manifest-path examples/${{ matrix.example }}/Cargo.toml

  postgres:
    name: PostgreSQL
    runs-on: ubuntu-latest
    needs: ["test", "derive-test", "binder-build", "postgres-build"]
    strategy:
      matrix:
        version: [14.4, 13.7, 12.11]
        example: [postgres, sqlx_postgres]
    services:
      postgres:
        image: postgres:${{ matrix.version }}
        env:
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_DB: query
          POSTGRES_USER: sea
          POSTGRES_PASSWORD: sea
        ports:
          - "5432:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path examples/${{ matrix.example }}/Cargo.toml

      - uses: actions-rs/cargo@v1
        with:
          command: run
          args: --manifest-path examples/${{ matrix.example }}/Cargo.toml
